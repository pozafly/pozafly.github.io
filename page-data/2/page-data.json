{"componentChunkName":"component---src-templates-index-tsx","path":"/2/","result":{"data":{"header":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#082828","images":{"fallback":{"src":"/static/68b85cb792e6c1dd32709606e5beab12/384e9/back.png","srcSet":"/static/68b85cb792e6c1dd32709606e5beab12/384e9/back.png 2000w,\n/static/68b85cb792e6c1dd32709606e5beab12/69da9/back.png 4000w","sizes":"2000px"},"sources":[{"srcSet":"/static/68b85cb792e6c1dd32709606e5beab12/2b408/back.avif 2000w,\n/static/68b85cb792e6c1dd32709606e5beab12/7e324/back.avif 4000w","type":"image/avif","sizes":"2000px"},{"srcSet":"/static/68b85cb792e6c1dd32709606e5beab12/c8570/back.webp 2000w,\n/static/68b85cb792e6c1dd32709606e5beab12/3654e/back.webp 4000w","type":"image/webp","sizes":"2000px"}]},"width":2000,"height":372}}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"title":"(14) Closure & Currying 적용기","date":"2021-04-30T15:13:47.149Z","tags":["Tripllo 제작기","Javascript","Vue.js"],"draft":false,"excerpt":"함수형 프로그래밍에 대해서 공부하다가 Tripllo에 적용한 클로저와 커링.","image":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/4865f93e60f5dd1f48a86f3ec467e982/51395/currying2.png","srcSet":"/static/4865f93e60f5dd1f48a86f3ec467e982/51395/currying2.png 700w","sizes":"100vw"},"sources":[{"srcSet":"/static/4865f93e60f5dd1f48a86f3ec467e982/d6890/currying2.avif 700w","type":"image/avif","sizes":"100vw"},{"srcSet":"/static/4865f93e60f5dd1f48a86f3ec467e982/2f35d/currying2.webp 700w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.4728571428571428}}},"author":[{"name":"Pozafly","bio":"Frontend Developer","avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#6808f8","images":{"fallback":{"src":"/static/8c061761f263c344f2c0416607c8adf1/73bb6/pozafly.jpg","srcSet":"/static/8c061761f263c344f2c0416607c8adf1/2f28c/pozafly.jpg 40w,\n/static/8c061761f263c344f2c0416607c8adf1/499f6/pozafly.jpg 80w,\n/static/8c061761f263c344f2c0416607c8adf1/73bb6/pozafly.jpg 120w","sizes":"100vw"},"sources":[{"srcSet":"/static/8c061761f263c344f2c0416607c8adf1/e73fe/pozafly.webp 40w,\n/static/8c061761f263c344f2c0416607c8adf1/61ca6/pozafly.webp 80w,\n/static/8c061761f263c344f2c0416607c8adf1/507b0/pozafly.webp 120w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1}}}}]},"excerpt":"참고1, 참고2, 참고3 개념 currying…","fields":{"readingTime":{"text":"7 min read"},"layout":"post","slug":"/tripllo/(14)Closure-Currying/"}}},{"node":{"frontmatter":{"title":"(13) Vuex-store와 EventBus에 대한 고찰","date":"2021-04-16T15:13:47.149Z","tags":["Tripllo 제작기","Vue.js"],"draft":false,"excerpt":"데이터를 Vuex store에 저장시키지 말고 로컬 컴포넌트에서 불러와 EventBus로 통신을 하면 어떻게 될까? 라는 물음에서 시작된 삽질기.","image":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/85c56d21ae8553ca810facc54736204f/2ebcf/eventBus.png","srcSet":"/static/85c56d21ae8553ca810facc54736204f/da04c/eventBus.png 750w,\n/static/85c56d21ae8553ca810facc54736204f/2ebcf/eventBus.png 768w","sizes":"100vw"},"sources":[{"srcSet":"/static/85c56d21ae8553ca810facc54736204f/66eaa/eventBus.avif 750w,\n/static/85c56d21ae8553ca810facc54736204f/4da01/eventBus.avif 768w","type":"image/avif","sizes":"100vw"},{"srcSet":"/static/85c56d21ae8553ca810facc54736204f/bcdb5/eventBus.webp 750w,\n/static/85c56d21ae8553ca810facc54736204f/b3cd2/eventBus.webp 768w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.4908854166666667}}},"author":[{"name":"Pozafly","bio":"Frontend Developer","avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#6808f8","images":{"fallback":{"src":"/static/8c061761f263c344f2c0416607c8adf1/73bb6/pozafly.jpg","srcSet":"/static/8c061761f263c344f2c0416607c8adf1/2f28c/pozafly.jpg 40w,\n/static/8c061761f263c344f2c0416607c8adf1/499f6/pozafly.jpg 80w,\n/static/8c061761f263c344f2c0416607c8adf1/73bb6/pozafly.jpg 120w","sizes":"100vw"},"sources":[{"srcSet":"/static/8c061761f263c344f2c0416607c8adf1/e73fe/pozafly.webp 40w,\n/static/8c061761f263c344f2c0416607c8adf1/61ca6/pozafly.webp 80w,\n/static/8c061761f263c344f2c0416607c8adf1/507b0/pozafly.webp 120w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1}}}}]},"excerpt":"Vuex-store와 EventBus에 대한 고찰 Tripllo 프로젝트를 리팩토링하면서, vue 리팩토링1의  파트를 진행하게 되었다. 해당 부분을 상세하게 한번 보면서 생각할 부분을 정리해보자. store…","fields":{"readingTime":{"text":"12 min read"},"layout":"post","slug":"/tripllo/(13)Vuex-and-eventBus/"}}},{"node":{"frontmatter":{"title":"Vue2 반응성에 대해 깊이 알아보기","date":"2021-04-13T20:13:47.149Z","tags":["Vue.js"],"draft":false,"excerpt":"Vue 2.x 버전의 반응성에 대해 깊이 알아보자. Vue의 반응성을 제대로 알지 못한다면 UI 컴포넌트를 다룰 때, 혹은 data 객체를 다룰 때 문제가 생길 수 있다.","image":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/10ee2b8fdfcd49d0c97068e1a1049ccb/550ca/vue-jet.jpg","srcSet":"/static/10ee2b8fdfcd49d0c97068e1a1049ccb/550ca/vue-jet.jpg 600w","sizes":"100vw"},"sources":[{"srcSet":"/static/10ee2b8fdfcd49d0c97068e1a1049ccb/1260c/vue-jet.avif 600w","type":"image/avif","sizes":"100vw"},{"srcSet":"/static/10ee2b8fdfcd49d0c97068e1a1049ccb/22c65/vue-jet.webp 600w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.525}}},"author":[{"name":"Pozafly","bio":"Frontend Developer","avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#6808f8","images":{"fallback":{"src":"/static/8c061761f263c344f2c0416607c8adf1/73bb6/pozafly.jpg","srcSet":"/static/8c061761f263c344f2c0416607c8adf1/2f28c/pozafly.jpg 40w,\n/static/8c061761f263c344f2c0416607c8adf1/499f6/pozafly.jpg 80w,\n/static/8c061761f263c344f2c0416607c8adf1/73bb6/pozafly.jpg 120w","sizes":"100vw"},"sources":[{"srcSet":"/static/8c061761f263c344f2c0416607c8adf1/e73fe/pozafly.webp 40w,\n/static/8c061761f263c344f2c0416607c8adf1/61ca6/pozafly.webp 80w,\n/static/8c061761f263c344f2c0416607c8adf1/507b0/pozafly.webp 120w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1}}}}]},"excerpt":"정리하면서 느꼈던 것 아래의 내용은 공식 홈페이지의 반응성(반응형)에 대해 정리된 글을 옮기고 난 후 느낀 점입니다. 1. 객체 불변성에 대해 Vue는 내부적으로 기존의 data 객체에 없었던 프로퍼티에 값을 추가해 주기 위해 Vue.set…","fields":{"readingTime":{"text":"15 min read"},"layout":"post","slug":"/vue/Vue2-반응성에-대해서/"}}},{"node":{"frontmatter":{"title":"(12) Let's Encrypt 갱신 자동화","date":"2021-04-12T10:13:47.149Z","tags":["Tripllo 제작기","Let's Encrypt","AutoMation"],"draft":false,"excerpt":"AWS EC2 환경에서 Nginx와 Let's Encrypt로 HTTPS SSL 인증서 갱신 자동화를 해보자.","image":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#080808","images":{"fallback":{"src":"/static/58a4a7e8eb69b8bdbea5d60e52f4155d/abc1a/lets-encrypt.png","srcSet":"/static/58a4a7e8eb69b8bdbea5d60e52f4155d/abc1a/lets-encrypt.png 640w","sizes":"100vw"},"sources":[{"srcSet":"/static/58a4a7e8eb69b8bdbea5d60e52f4155d/daee1/lets-encrypt.avif 640w","type":"image/avif","sizes":"100vw"},{"srcSet":"/static/58a4a7e8eb69b8bdbea5d60e52f4155d/b659a/lets-encrypt.webp 640w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.825}}},"author":[{"name":"Pozafly","bio":"Frontend Developer","avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#6808f8","images":{"fallback":{"src":"/static/8c061761f263c344f2c0416607c8adf1/73bb6/pozafly.jpg","srcSet":"/static/8c061761f263c344f2c0416607c8adf1/2f28c/pozafly.jpg 40w,\n/static/8c061761f263c344f2c0416607c8adf1/499f6/pozafly.jpg 80w,\n/static/8c061761f263c344f2c0416607c8adf1/73bb6/pozafly.jpg 120w","sizes":"100vw"},"sources":[{"srcSet":"/static/8c061761f263c344f2c0416607c8adf1/e73fe/pozafly.webp 40w,\n/static/8c061761f263c344f2c0416607c8adf1/61ca6/pozafly.webp 80w,\n/static/8c061761f263c344f2c0416607c8adf1/507b0/pozafly.webp 120w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1}}}}]},"excerpt":"Let’s Encrypt 갱신 자동화 서비스 환경은 AWS의 EC2(Amazon linux2) + Nginx 조합으로 되어있습니다. *amazon linux2는 apt-get 패키지 관련 명령어 대신 yum 패키지 명령어를 사용합니다. Let’s…","fields":{"readingTime":{"text":"10 min read"},"layout":"post","slug":"/tripllo/(12)aws-lets-encrypt-renewal-automation/"}}},{"node":{"frontmatter":{"title":"(11) Sentry 에러 로깅 시스템 도입","date":"2021-04-09T17:13:47.149Z","tags":["Tripllo 제작기","Sentry","에러 모니터링"],"draft":false,"excerpt":"Sentry를 통해 프론트엔드 에러 로깅 시스템을 도입해보자.","image":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/bf7a9491463863772f181d36c58051fa/245fe/sentry.png","srcSet":"/static/bf7a9491463863772f181d36c58051fa/6f128/sentry.png 750w,\n/static/bf7a9491463863772f181d36c58051fa/245fe/sentry.png 900w","sizes":"100vw"},"sources":[{"srcSet":"/static/bf7a9491463863772f181d36c58051fa/4bc47/sentry.avif 750w,\n/static/bf7a9491463863772f181d36c58051fa/80d3b/sentry.avif 900w","type":"image/avif","sizes":"100vw"},{"srcSet":"/static/bf7a9491463863772f181d36c58051fa/fdac4/sentry.webp 750w,\n/static/bf7a9491463863772f181d36c58051fa/ff899/sentry.webp 900w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5555555555555556}}},"author":[{"name":"Pozafly","bio":"Frontend Developer","avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#6808f8","images":{"fallback":{"src":"/static/8c061761f263c344f2c0416607c8adf1/73bb6/pozafly.jpg","srcSet":"/static/8c061761f263c344f2c0416607c8adf1/2f28c/pozafly.jpg 40w,\n/static/8c061761f263c344f2c0416607c8adf1/499f6/pozafly.jpg 80w,\n/static/8c061761f263c344f2c0416607c8adf1/73bb6/pozafly.jpg 120w","sizes":"100vw"},"sources":[{"srcSet":"/static/8c061761f263c344f2c0416607c8adf1/e73fe/pozafly.webp 40w,\n/static/8c061761f263c344f2c0416607c8adf1/61ca6/pozafly.webp 80w,\n/static/8c061761f263c344f2c0416607c8adf1/507b0/pozafly.webp 120w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1}}}}]},"excerpt":"Sentry Sentry는 Application Error Monitoring…","fields":{"readingTime":{"text":"17 min read"},"layout":"post","slug":"/tripllo/(11)vue-sentry-error-monitoring-system/"}}},{"node":{"frontmatter":{"title":"(10) Frontend -travis 배포 자동화","date":"2021-04-06T17:13:47.149Z","tags":["Tripllo 제작기","Travis CI","AutoMation"],"draft":false,"excerpt":"Vue프로젝트를 aws의 S3와 CloudFront에 Travis CI를 통해 배포 자동화를 해보자.","image":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#080808","images":{"fallback":{"src":"/static/49f04b06d4009a791ea88d198934da29/2b5bd/travis.png","srcSet":"/static/49f04b06d4009a791ea88d198934da29/343d5/travis.png 750w,\n/static/49f04b06d4009a791ea88d198934da29/2b5bd/travis.png 1053w","sizes":"100vw"},"sources":[{"srcSet":"/static/49f04b06d4009a791ea88d198934da29/2139a/travis.avif 750w,\n/static/49f04b06d4009a791ea88d198934da29/5dcc9/travis.avif 1053w","type":"image/avif","sizes":"100vw"},{"srcSet":"/static/49f04b06d4009a791ea88d198934da29/ffebb/travis.webp 750w,\n/static/49f04b06d4009a791ea88d198934da29/76746/travis.webp 1053w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.0066476733143401}}},"author":[{"name":"Pozafly","bio":"Frontend Developer","avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#6808f8","images":{"fallback":{"src":"/static/8c061761f263c344f2c0416607c8adf1/73bb6/pozafly.jpg","srcSet":"/static/8c061761f263c344f2c0416607c8adf1/2f28c/pozafly.jpg 40w,\n/static/8c061761f263c344f2c0416607c8adf1/499f6/pozafly.jpg 80w,\n/static/8c061761f263c344f2c0416607c8adf1/73bb6/pozafly.jpg 120w","sizes":"100vw"},"sources":[{"srcSet":"/static/8c061761f263c344f2c0416607c8adf1/e73fe/pozafly.webp 40w,\n/static/8c061761f263c344f2c0416607c8adf1/61ca6/pozafly.webp 80w,\n/static/8c061761f263c344f2c0416607c8adf1/507b0/pozafly.webp 120w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1}}}}]},"excerpt":"Travis Travis CI에 대해서 알아보자. 우선 Travis 공식 Docs를 보고 따라 해봤다. 참고 자료는 이동욱 님의 스프링 부트와 AWS로 혼자 구현하는 웹 서비스 책을 참고했다. 우선 travis endpoint…","fields":{"readingTime":{"text":"17 min read"},"layout":"post","slug":"/tripllo/(10)vue-travis-automation/"}}}]}},"pageContext":{"limit":6,"skip":6,"numPages":6,"currentPage":2}},"staticQueryHashes":["2234322554","3549156140"],"slicesMap":{}}