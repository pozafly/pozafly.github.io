{"version":3,"file":"component---src-templates-index-tsx-7c66c2a1264bf72f560e.js","mappings":"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","sources":["webpack://gatsby-casper/./src/components/Pagination.tsx","webpack://gatsby-casper/./src/templates/index.tsx"],"sourcesContent":["import { Link } from 'gatsby';\nimport React from 'react';\nimport { darken } from 'polished';\nimport { css } from '@emotion/react';\n\nimport { colors } from '../styles/colors';\n\nexport type PaginationProps = {\n  currentPage: number;\n  numPages: number;\n};\n\nfunction Pagination({ currentPage, numPages }: PaginationProps) {\n  const isFirst = currentPage === 1;\n  const isLast = currentPage === numPages;\n  const prevPage = currentPage - 1 === 1 ? '/' : `../${(currentPage - 1).toString()}`;\n  const nextPage = `../${(currentPage + 1).toString()}`;\n\n  return (\n    <nav css={navCss}>\n      <div>\n        {!isFirst && (\n          <Link to={prevPage} rel=\"prev\">\n            {/* << symbol */}\n            {String.fromCharCode(171)}\n          </Link>\n        )}\n\n        {Array.from({ length: numPages }, (_, i) => (\n          <Link\n            key={`pagination-number${i + 1}`}\n            className={i + 1 === currentPage ? 'active' : ''}\n            to={`/${i === 0 ? '' : i + 1}`}\n          >\n            {i + 1}\n          </Link>\n        ))}\n\n        {!isLast && (\n          <Link to={nextPage} rel=\"next\">\n            {/* >> symbol */}\n            {String.fromCharCode(187)}\n          </Link>\n        )}\n      </div>\n    </nav>\n  );\n}\n\nconst navCss = css`\n  text-align: center;\n  div {\n    display: inline-block;\n  }\n\n  a {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell;\n    background: #fff;\n    color: black;\n    float: left;\n    padding: 8px 16px;\n    text-decoration: none;\n    transition: background-color 0.3s;\n    border: 1px solid #ddd;\n    margin: 0 4px;\n    box-shadow: rgba(39, 44, 49, 0.06) 8px 14px 38px, rgba(39, 44, 49, 0.03) 1px 3px 8px;\n    border-radius: 6px;\n    margin-bottom: 5px;\n    min-width: 50px;\n\n    &.active {\n      background-color: #b3b3b3;\n    }\n\n    &:hover:not(.active) {\n      background-color: #ddd;\n    }\n\n    &:hover {\n      text-decoration: none;\n    }\n  }\n`;\n\nexport default Pagination;\n","import { graphql } from 'gatsby';\nimport { getSrc, getImage } from 'gatsby-plugin-image';\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\n\nimport { css } from '@emotion/react';\n\nimport { Footer } from '../components/Footer';\nimport SiteNav from '../components/header/SiteNav';\nimport Pagination from '../components/Pagination';\nimport { PostCard } from '../components/PostCard';\nimport { Wrapper } from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport {\n  inner,\n  outer,\n  PostFeed,\n  Posts,\n  SiteDescription,\n  SiteHeader,\n  SiteHeaderContent,\n  SiteMain,\n  SiteTitle,\n  SiteHeaderStyles,\n} from '../styles/shared';\nimport config from '../website-config';\nimport type { PageContext } from './post';\n\nexport type IndexProps = {\n  children: React.ReactNode;\n  pageContext: {\n    currentPage: number;\n    numPages: number;\n  };\n  data: {\n    logo: any;\n    header: any;\n    allMarkdownRemark: {\n      edges: Array<{\n        node: PageContext;\n      }>;\n    };\n  };\n};\n\nfunction IndexPage(props: IndexProps) {\n  const width = getImage(props.data.header)?.width;\n  const height = getImage(props.data.header)?.height;\n\n  return (\n    <IndexLayout css={HomePosts}>\n      <Helmet>\n        <html lang={config.lang} />\n        <title>{config.title}</title>\n        <meta name=\"description\" content={config.description} />\n        <meta property=\"og:site_name\" content={config.title} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={config.title} />\n        <meta property=\"og:description\" content={config.description} />\n        <meta property=\"og:url\" content={config.siteUrl} />\n        <meta property=\"og:image\" content={`${config.siteUrl}${getSrc(props.data.header)}`} />\n        {config.instagram && <meta property=\"article:publisher\" content={config.instagram} />}\n        {config.googleSiteVerification && (\n          <meta name=\"google-site-verification\" content={config.googleSiteVerification} />\n        )}\n        <meta name=\"github:card\" content=\"summary_large_image\" />\n        <meta name=\"github:title\" content={config.title} />\n        <meta name=\"github:description\" content={config.description} />\n        <meta name=\"github:url\" content={config.siteUrl} />\n        <meta name=\"github:image\" content={`${config.siteUrl}${getSrc(props.data.header)}`} />\n        {config.github && (\n          <meta\n            name=\"github:site\"\n            content={`@${config.github.split('https://github.com/')[1]}`}\n          />\n        )}\n        <meta property=\"og:image:width\" content={width?.toString()} />\n        <meta property=\"og:image:height\" content={height?.toString()} />\n      </Helmet>\n      <Wrapper>\n        <div\n          css={[outer, SiteHeader, SiteHeaderStyles]}\n          className=\"site-header-background\"\n          style={{\n            backgroundImage: `url('${getSrc(props.data.header)}')`,\n          }}\n        >\n          <div css={inner}>\n            <SiteNav isHome />\n            <SiteHeaderContent className=\"site-header-content\">\n              <SiteTitle className=\"site-title\">\n                {props.data.logo ? (\n                  <img\n                    style={{ maxHeight: '55px', height: '55px' }}\n                    src={getSrc(props.data.logo)}\n                    alt={config.title}\n                  />\n                ) : (\n                  config.title\n                )}\n              </SiteTitle>\n              <SiteDescription>{config.description}</SiteDescription>\n            </SiteHeaderContent>\n          </div>\n        </div>\n        <main id=\"site-main\" css={[SiteMain, outer]}>\n          <div css={[inner, Posts]}>\n            <div css={[PostFeed]}>\n              {props.data.allMarkdownRemark.edges.map(\n                (post, index) =>\n                  // filter out drafts in production\n                  (post.node.frontmatter.draft !== true ||\n                    process.env.NODE_ENV !== 'production') && (\n                    <PostCard key={post.node.fields.slug} post={post.node} isLarge={index === 0} />\n                  ),\n              )}\n            </div>\n          </div>\n        </main>\n        {props.children}\n        {props.pageContext.numPages > 1 && (\n          <Pagination\n            currentPage={props.pageContext.currentPage}\n            numPages={props.pageContext.numPages}\n          />\n        )}\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n}\n\n// logo: file(relativePath: { eq: \"img/ghost-logo.png\" }) {\n//       childImageSharp {\n//     gatsbyImageData(layout: FIXED)\n//   }\n// }\n\nexport const pageQuery = graphql`\n  query blogPageQuery($skip: Int!, $limit: Int!) {\n    header: file(relativePath: { eq: \"img/common/back.png\" }) {\n      childImageSharp {\n        gatsbyImageData(width: 2000, quality: 100, layout: FIXED, formats: [AUTO, WEBP, AVIF])\n      }\n    }\n    allMarkdownRemark(\n      sort: { frontmatter: { date: DESC } }\n      filter: { frontmatter: { draft: { ne: true } } }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          frontmatter {\n            title\n            date\n            tags\n            draft\n            excerpt\n            image {\n              childImageSharp {\n                gatsbyImageData(layout: FULL_WIDTH, formats: [AUTO, WEBP, AVIF])\n              }\n            }\n            author {\n              name\n              bio\n              avatar {\n                childImageSharp {\n                  gatsbyImageData(layout: FULL_WIDTH, breakpoints: [40, 80, 120])\n                }\n              }\n            }\n          }\n          excerpt\n          fields {\n            readingTime {\n              text\n            }\n            layout\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst HomePosts = css`\n  @media (min-width: 795px) {\n    .post-card-large {\n      flex: 1 1 100%;\n      flex-direction: row;\n      padding-bottom: 40px;\n      min-height: 280px;\n      border-top: 0;\n    }\n\n    .post-card-large .post-card-title {\n      margin-top: 0;\n      font-size: 3.2rem;\n    }\n\n    .post-card-large:not(.no-image) .post-card-header {\n      margin-top: 0;\n    }\n\n    .post-card-large .post-card-image-link {\n      position: relative;\n      flex: 1 1 auto;\n      margin-bottom: 0;\n      min-height: 380px;\n    }\n\n    .post-card-large .post-card-image {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n    }\n\n    .post-card-large .post-card-content {\n      flex: 0 1 361px;\n      justify-content: center;\n    }\n\n    .post-card-large .post-card-title {\n      margin-top: 0;\n      font-size: 3.2rem;\n    }\n\n    .post-card-large .post-card-content-link {\n      /* padding: 0 0 0 40px; */\n    }\n\n    .post-card-large .post-card-meta {\n      /* padding: 0 0 0 40px; */\n    }\n\n    .post-card-large .post-card-excerpt p {\n      margin-bottom: 1.5em;\n      font-size: 1.8rem;\n      line-height: 1.5em;\n    }\n  }\n`;\n\nexport default IndexPage;\n"],"names":["navCss","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","___EmotionJSX","css","Link","to","rel","String","fromCharCode","Array","from","length","_","i","key","className","HomePosts","name","styles","props","width","getImage","data","header","_getImage","height","_getImage2","IndexLayout","Helmet","lang","config","content","property","getSrc","Wrapper","outer","SiteHeader","SiteHeaderStyles","style","backgroundImage","inner","SiteNav","isHome","SiteHeaderContent","SiteTitle","logo","maxHeight","src","alt","SiteDescription","id","SiteMain","Posts","PostFeed","allMarkdownRemark","edges","map","post","index","node","frontmatter","draft","PostCard","fields","slug","isLarge","children","pageContext","Pagination","Footer"],"sourceRoot":""}