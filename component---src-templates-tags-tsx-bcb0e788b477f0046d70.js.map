{"version":3,"file":"component---src-templates-tags-tsx-bcb0e788b477f0046d70.js","mappings":"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","sources":["webpack://record-journey/./src/templates/tags.tsx"],"sourcesContent":["import { Fragment } from 'react';\nimport { graphql } from 'gatsby';\nimport { getSrc } from 'gatsby-plugin-image';\n\nimport { Footer } from '@/components/Footer.tsx';\nimport SiteNav from '@/components/header/SiteNav.tsx';\nimport { PostCard } from '@/components/PostCard.tsx';\nimport { Wrapper } from '@/components/Wrapper.tsx';\nimport IndexLayout from '@/layouts/index.tsx';\nimport {\n  inner,\n  outer,\n  PostFeed,\n  ResponsiveHeaderBackground,\n  SiteArchiveHeader,\n  SiteDescription,\n  SiteHeaderBackground,\n  SiteHeaderContent,\n  SiteMain,\n  SiteNavMain,\n  SiteTitle,\n} from '@/styles/shared.ts';\nimport config from '@/website-config.ts';\n\nimport type { PageContext } from '@/templates/post.tsx';\nimport type { ImageDataLike } from 'gatsby-plugin-image';\n\ntype TagData = {\n  allTagYaml: {\n    edges: Array<{\n      node: {\n        yamlId: string;\n        description: string;\n        image?: ImageDataLike;\n      };\n    }>;\n  };\n  allMarkdownRemark: {\n    totalCount: number;\n    edges: Array<{\n      node: PageContext;\n    }>;\n  };\n};\n\ntype TagTemplateProps = {\n  pageContext: {\n    tag: string;\n  };\n  data: TagData;\n};\n\ntype TagHeadTemplateProps = {\n  location: Location;\n  data: TagData;\n  pageContext: {\n    tag: string;\n  };\n};\n\nexport const Head = ({ data, pageContext, location }: TagHeadTemplateProps) => {\n  const tag = pageContext.tag ? pageContext.tag : '';\n  const tagData = data.allTagYaml.edges.find(\n    (n) => n.node.yamlId.toLowerCase() === tag.toLowerCase(),\n  );\n\n  return (\n    <Fragment>\n      <title>{tag}</title>\n      <meta name=\"description\" content={tagData?.node ? tagData.node.description : ''} />\n      <meta property=\"og:site_name\" content={config.title} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:title\" content={`${tag} - ${config.title}`} />\n      <meta property=\"og:url\" content={config.siteUrl + location.pathname} />\n      {config.instagram && <meta property=\"article:publisher\" content={config.instagram} />}\n      <meta name=\"github:card\" content=\"summary_large_image\" />\n      <meta name=\"github:title\" content={`${tag} - ${config.title}`} />\n      <meta name=\"github:url\" content={config.siteUrl + location.pathname} />\n      {config.github && (\n        <meta name=\"github:site\" content={`@${config.github.split('https://github.com/')[1]}`} />\n      )}\n    </Fragment>\n  );\n};\n\nfunction Tags({ pageContext, data }: TagTemplateProps) {\n  const tag = pageContext.tag ? pageContext.tag : '';\n  const { edges, totalCount } = data.allMarkdownRemark;\n  const tagData = data.allTagYaml.edges.find(\n    (n) => n.node.yamlId.toLowerCase() === tag.toLowerCase(),\n  );\n\n  const tagForImage = tagData?.node.image;\n  /* eslint-disable  @typescript-eslint/no-non-null-assertion */\n  const backgroundImageData = getSrc(tagForImage!);\n\n  return (\n    <IndexLayout>\n      <Wrapper>\n        <header className=\"site-archive-header\" css={[SiteArchiveHeader]}>\n          <div css={[outer, SiteNavMain]}>\n            <div css={inner}>\n              <SiteNav isHome={false} />\n            </div>\n          </div>\n          <ResponsiveHeaderBackground\n            css={[outer, SiteHeaderBackground]}\n            backgroundImage={backgroundImageData}\n            className=\"site-header-background\"\n          >\n            <SiteHeaderContent css={inner} className=\"site-header-content\">\n              <SiteTitle className=\"site-title\">{tag}</SiteTitle>\n              <SiteDescription className=\"site-description\">\n                {tagData?.node.description ? (\n                  tagData.node.description\n                ) : (\n                  <Fragment>\n                    A collection of {totalCount > 1 && `${totalCount} posts`}\n                    {totalCount === 1 && '1 post'}\n                    {totalCount === 0 && 'No posts'}\n                  </Fragment>\n                )}\n              </SiteDescription>\n            </SiteHeaderContent>\n          </ResponsiveHeaderBackground>\n        </header>\n        <main id=\"site-main\" css={[SiteMain, outer]}>\n          <div css={inner}>\n            <div css={[PostFeed]}>\n              {edges.map(({ node }) => (\n                <PostCard key={node.fields.slug} post={node} />\n              ))}\n            </div>\n          </div>\n        </main>\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n}\n\nexport default Tags;\n\nexport const pageQuery = graphql`\n  query ($tag: String) {\n    allTagYaml {\n      edges {\n        node {\n          yamlId\n          description\n          image {\n            childImageSharp {\n              gatsbyImageData(layout: FULL_WIDTH)\n            }\n          }\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { frontmatter: { date: DESC } }\n      filter: { frontmatter: { tags: { in: [$tag] }, draft: { ne: true } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          frontmatter {\n            title\n            excerpt\n            tags\n            date\n            image {\n              childImageSharp {\n                gatsbyImageData(layout: FULL_WIDTH, placeholder: BLURRED)\n              }\n            }\n          }\n          fields {\n            readingTime {\n              text\n            }\n            layout\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["Head","_ref","data","pageContext","location","tag","tagData","allTagYaml","edges","find","n","node","yamlId","toLowerCase","___EmotionJSX","Fragment","name","content","description","property","config","pathname","totalCount","allMarkdownRemark","tagForImage","image","backgroundImageData","getSrc","IndexLayout","Wrapper","className","css","SiteArchiveHeader","outer","SiteNavMain","inner","SiteNav","isHome","ResponsiveHeaderBackground","SiteHeaderBackground","backgroundImage","SiteHeaderContent","SiteTitle","SiteDescription","id","SiteMain","PostFeed","map","_ref3","PostCard","key","fields","slug","post","Footer"],"sourceRoot":""}